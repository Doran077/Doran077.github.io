<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01_git 简介</title>
    <url>/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/01-git-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="集中式-svn"><a href="#集中式-svn" class="headerlink" title="集中式(svn)"></a>集中式(svn)</h3><p>svn因为每次存的都是差异 需要的硬盘空间会相对的小一点  可是回滚的速度会很慢<br>优点:<br>    代码存放在单一的服务器上 便于项目的管理<br>缺点:<br>    服务器宕机: 员工写的代码得不到保障<br>    服务器炸了: 整个项目的历史记录都会丢失</p>
<h3 id="分布式-git"><a href="#分布式-git" class="headerlink" title="分布式(git)"></a>分布式(git)</h3><p>git每次存的都是项目的完整快照 需要的硬盘空间会相对大一点<br>    (Git团队对代码做了极致的压缩 最终需要的实际空间比svn多不了太多 可是Git的回滚速度极快)<br>优点:<br>    完全的分布式<br>缺点:<br>    学习起来比SVN难一点</p>
]]></content>
      <categories>
        <category>版本控制</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>02_Git的基本理论</title>
    <url>/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/02-Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>类似于qq的下一步 下一步</p>
<p>查看版本号</p>
<p>git –version</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>git config –global user.name ysj</p>
<p>git config –global user.email <a href="mailto:&#x79;&#115;&#x6a;&#49;&#x38;&#48;&#51;&#x37;&#x33;&#49;&#x36;&#x34;&#51;&#51;&#x40;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#x6d;">&#x79;&#115;&#x6a;&#49;&#x38;&#48;&#51;&#x37;&#x33;&#49;&#x36;&#x34;&#51;&#51;&#x40;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#x6d;</a></p>
<p>git config –list</p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>​        Git 的核心部分是一个简单的键值对数据库。你可以向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索该内容</p>
<p>​        Git 存储内容的方式：一个文件对应一条内容。校验和的前两个字符用于命名子目录，余下的38个字符则用作文件名。</p>
<p>​        在 Git 中，<font color="deeppink"><strong>文件名并没有被保存</strong></font>——我们仅保存了文件的内容</p>
<p>​        <strong><font color="deeppink">解决方案：树对象</font></strong></p>
<p>​        树对象（tree object），它能解决文件名保存的问题，也允许我们将多个文件组织到一起。Git 以一种类似于 UNIX 文件系统的方式存储内容。所有内容均以树对象和数据对象<font color="red">(git对象)</font>的形式存储，其中树对象对应了 UNIX 中的目录项， 数据对象<font color="red">(git对象)</font>则大致上对应文件内容。一个树对象包含了一条或多条记录<font color="cornflowerblue">（每条记录含有一个指向git对象或者子树对象的SHA-1指针，以及相应的模式、类型、文件名信息）。</font>一个树对象也可以包含另一个树对象。</p>
<h3 id="区域（操作时的流程）"><a href="#区域（操作时的流程）" class="headerlink" title="区域（操作时的流程）"></a>区域（操作时的流程）</h3><p><font color="deeppink"><strong>工作区</strong></font>(沙箱环境Git不会管理)</p>
<p><font color="deeppink"><strong>暂存区</strong></font>（不在数据库中，存的是git对象的描述信息，也即在工作区执行（git add ./）命令时文件的描述信息，例如时间戳、内容的长度等，代表了此时文件的状态）(暂存区只有一个存放在根目录下的index文件中)</p>
<p><font color="deeppink"><strong>版本区</strong></font>（将以此版本的暂存区进行以此快照，并存入数据库中）</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><font color="deeppink"><strong>Git对象</strong></font>（代表文件的一次次版本）只能存数据</p>
<p>​    key：val  组成的键值对（key是val对应的hash）</p>
<p>​                    键值对在Git内部是一个<font color="red"><strong>blob类型</strong></font></p>
<p><font color="deeppink"><strong>树对象</strong></font>（代表项目的一次次版本）</p>
<p><font color="deeppink"><strong>提交对象</strong></font>(对每次提交版本的封装，包括注释)</p>
]]></content>
      <categories>
        <category>版本控制</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>03_Git、linux基本操作</title>
    <url>/uncategorized/03-Git%E3%80%81linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>初始化新仓库：git init</p>
<p><font color="red"><strong>git 目录</strong></font></p>
<p><img src="/uncategorized/03-Git%E3%80%81linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01.png" alt="git目录"></p>
<p>​                    hooks                        目录包含客户端或服务端的钩子脚本；</p>
<p>​                    info                            包含一个全局性排除文件</p>
<p>​                    logs                            保存日志信息</p>
<p>​                    <font color="red"><strong>objects                     目录存储所有数据内容；</strong></font></p>
<p>​                    <font color="red"><strong>refs                            目录存储指向数据的提交对象的指针（所有分支）</strong></font></p>
<p>​                    config                        文件包含项目特有的配置选项</p>
<p>​                    description                用来显示对仓库的描述信息</p>
<p>​                    <font color="red"><strong>head                        文件指示目前被检出的分支</strong></font></p>
<p>​                    <font color="red"><strong>index                        文件保存暂存区信息</strong></font></p>
<h3 id="git-底层命令："><a href="#git-底层命令：" class="headerlink" title="git 底层命令："></a>git 底层命令：</h3><p><strong>git 对象</strong></p>
<p>​        <font color="blue">git hash-object -w 文件路径</font>（生成一个key(hash值)和val的键值对，并将其<strong>存入.git/objects</strong>）</p>
<p><strong>tree对象</strong></p>
<p>​        <font color="blue">git update-index –add –cacheinfo 10064 hash值 text.txt </font>(此时没有生成树对象,只是向暂存区添加一条记录,让git对象对应上传文件名,并将其<strong>存入.git/index</strong>)</p>
<p>​        <font color="blue">git write-tree</font> (生成树对象,并将其<strong>存入.git/objects</strong>)</p>
<p><strong>commit对象</strong></p>
<p>​        <font color="blue">echo ‘内容’ / git commit-tree treehash值</font>  (生成一个提交对象并将其<strong>存入.git/objects</strong>)</p>
<p><strong>对以上对象的查询:</strong></p>
<p>​        <font color="blue">git cat-file -p hash值</font>  (拿对应对象的内容)</p>
<p>​        <font color="blue">git cat-file -t hash值</font>  (拿对应对象的类型)</p>
<p><strong>查看暂存区:</strong></p>
<p>​        <font color="cornflowerblue">git ls-files -s</font></p>
<h2 id="基础的linux命令"><a href="#基础的linux命令" class="headerlink" title="基础的linux命令"></a>基础的linux命令</h2><p><strong>clear</strong> ：清除屏幕</p>
<p><strong>echo ‘test content’**：往控制台输出信息 **echo ‘test content’ &gt; test.txt</strong></p>
<p><strong>ll</strong>：将当前目录下的 子文件&amp;子目录平铺在控制台</p>
<p><strong>find</strong> <strong>目录名</strong>： 将对应目录下的子孙文件&amp;子孙目录平铺在控制台</p>
<p><strong>find</strong> <strong>目录名</strong> <strong>-type f</strong> ：将对应目录下的文件平铺在控制台</p>
<p><strong>rm</strong>  <strong>文件名 ：</strong> 删除文件</p>
<p><strong>mv</strong> <strong>源文件 重命名文件</strong>: 重命名</p>
<p><strong>cat</strong> <strong>文件的</strong> <strong>url :</strong> 查看对应文件的内容</p>
<h4 id="vim-文件的-url-在英文模式下"><a href="#vim-文件的-url-在英文模式下" class="headerlink" title="vim 文件的 url(在英文模式下)"></a>vim 文件的 url(在英文模式下)</h4><ul>
<li><p>按 i 进插入模式 进行文件的编辑按 esc 键&amp;按:键 进行命令的执行</p>
</li>
<li><p>q!   强制退出（不保存）</p>
</li>
<li><p>wq  保存退出</p>
</li>
<li><p>set nu 设置行号</p>
</li>
</ul>
<p>​    </p>
]]></content>
  </entry>
</search>
